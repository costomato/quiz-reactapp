{"version":3,"sources":["components/OptionBtn.js","components/QuizInterface.js","components/Navbar.js","components/LoadingText.js","App.js","reportWebVitals.js","index.js"],"names":["btnStyle","margin","background","OptionBtn","props","id","buttonId","onClick","func","style","type","className","text","correctAnswers","questionStyle","color","getOptionButtons","newArray","options","forEach","element","includes","push","map","data","toString","concat","indexOf","questionId","optionId","clickedAnswer","correct","totalOptions","quizSize","i","btnId","document","getElementById","splice","innerHTML","length","answerClick","QuizInterface","question","Navbar","href","role","labelStyle","LoadingText","getShuffledArray","array","newValue","index","Math","floor","random","replaceAll","scoreStyle","right","top","marginTop","float","paddingTop","paddingBottom","paddingLeft","paddingRight","borderRadius","position","App","state","loading","quiz","a","fetch","response","json","this","setState","results","quizData","correct_answer","incorrect_answers","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8350dc29.chunk.js","sourcesContent":["import React from \"react\";\n\nconst btnStyle = {\n    margin: 8,\n    background: '#4f75f1'\n};\n\nexport default function OptionBtn(props) {\n    return (\n        <button id={props.buttonId} onClick={props.func} style={btnStyle} type=\"button\" className=\"btn btn-primary\">{props.text}</button>\n    )\n}","import React from \"react\";\nimport OptionBtn from \"./OptionBtn\";\n\nconst correctAnswers = []\nfunction answerClick(questionId, optionId, clickedAnswer, correct, totalOptions, quizSize) {\n    for (let i = 0; i < totalOptions; i++) {\n        const btnId = questionId.toString().concat(i.toString());\n        document.getElementById(btnId).style.background = '#4f75f1'\n    }\n    if (clickedAnswer === correct) {\n        if (!correctAnswers.includes(questionId))\n            correctAnswers.push(questionId)\n        document.getElementById(optionId).style.background = '#04d46f'\n    } else {\n        if (correctAnswers.includes(questionId))\n            correctAnswers.splice(correctAnswers.indexOf(questionId), 1)\n        document.getElementById(optionId).style.background = '#f11b43'\n    }\n    document.getElementById('score').innerHTML = `Score: ${correctAnswers.length}/${quizSize}`\n}\n\nconst questionStyle = {\n    color: \"white\"\n};\n\nfunction getOptionButtons(props) {\n    //because props.options array comes with duplicate value for correct answer idk why\n    //so i created a new array which has no duplicate values\n    //let me know if your figure out the reason for duplicate values\n    const newArray = []\n    props.options.forEach(element => {\n        if (!newArray.includes(element))\n            newArray.push(element)\n    })\n    return newArray.map(data =>\n        <OptionBtn\n            buttonId={props.id.toString().concat(newArray.indexOf(data).toString())}\n            func={() => answerClick(props.id, props.id.toString().concat(newArray.indexOf(data).toString()), data.toString(), props.correct, newArray.length, props.quizSize)}\n            text={data.toString()}/>)\n}\n\nexport default function QuizInterface(props) {\n    return (\n        <div>\n            <h5 style={questionStyle}>Question: {props.question}</h5>\n            {getOptionButtons(props)}\n        </div>\n    )\n}\n","import React from \"react\";\n\nexport default function Navbar() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"/\">QUIZ</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\"\n                        data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"/>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Reload quiz</a>\n                        </li>\n                        <li className=\"nav-item dropdown\">\n                            <a className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\"\n                               data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                                Quiz Category\n                            </a>\n                            <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                <li><a href=\"/\" className=\"dropdown-item\">Coming soon</a></li>\n                            </ul>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    )\n}","import React from \"react\";\n\nconst labelStyle = {\n    color: \"white\"\n};\n\nexport default function LoadingText() {\n    return (\n        <div className=\"mb-3\">\n            <h5 id=\"jsonHeading\" style={labelStyle}>Loading quiz...</h5>\n        </div>\n    )\n}","import './App.css';\nimport QuizInterface from \"./components/QuizInterface\";\nimport React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport LoadingText from \"./components/LoadingText\";\n\nfunction getShuffledArray(array, newValue) {\n    const index = Math.floor(Math.random() * (array.length + 1));\n    array.splice(index, 0, newValue);\n    for (let i = 0; i < array.length; i++)\n        array[i] = array[i].replaceAll(\"&#039;\", \"'\").replaceAll(\"&amp;\", \"&\").replaceAll(\"&quot;\", '\"')\n    return array\n}\n\nfunction getQuizInterface(quizData) {\n    return quizData.results.map(data =>\n        <QuizInterface quizSize={quizData.results.length}\n                       id={quizData.results.indexOf(data)}\n                       question={data.question.replaceAll(\"&#039;\", \"'\").replaceAll(\"&amp;\", \"&\").replaceAll(\"&quot;\", '\"')}\n                       correct={data.correct_answer.replaceAll(\"&#039;\", \"'\").replaceAll(\"&amp;\", \"&\").replaceAll(\"&quot;\", '\"')}\n                       options={getShuffledArray(data.incorrect_answers, data.correct_answer)}/>);\n}\n\nconst scoreStyle = {\n    color: '#fff',\n    right: 16,\n    top: 8,\n    marginTop: 8,\n    float: 'right',\n    background: 'rgba(68,173,41,0.6)',\n    paddingTop: 10,\n    paddingBottom: 10,\n    paddingLeft: 16,\n    paddingRight: 16,\n    borderRadius: 80,\n    position: 'sticky'\n}\n\nexport default class App extends React.Component {\n    state = {\n        loading: true,\n        quiz: null\n    };\n\n    async componentDidMount() {\n        const url = \"https://opentdb.com/api.php?amount=10\";\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({quiz: data, loading: false});\n    }\n\n    render() {\n        return (\n            <>\n                <Navbar/>\n                <div>\n                    {this.state.loading || !this.state.quiz ? (\n                        <div className=\"container\">\n                            <LoadingText/>\n                        </div>\n                    ) : (\n                        <div>\n                            <h6 style={scoreStyle} id='score'>Score: 0/{this.state.quiz.results.length}</h6>\n                            {getQuizInterface(this.state.quiz)}\n                        </div>\n                    )}\n                </div>\n            </>\n        )\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}